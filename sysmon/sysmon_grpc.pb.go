// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: sysmon/sysmon.proto

package sysmonpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysMon_GetStatistic_FullMethodName = "/sysmon.SysMon/GetStatistic"
)

// SysMonClient is the client API for SysMon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysMonClient interface {
	GetStatistic(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Statistic, error)
}

type sysMonClient struct {
	cc grpc.ClientConnInterface
}

func NewSysMonClient(cc grpc.ClientConnInterface) SysMonClient {
	return &sysMonClient{cc}
}

func (c *sysMonClient) GetStatistic(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, SysMon_GetStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysMonServer is the server API for SysMon service.
// All implementations must embed UnimplementedSysMonServer
// for forward compatibility
type SysMonServer interface {
	GetStatistic(context.Context, *Request) (*Statistic, error)
	mustEmbedUnimplementedSysMonServer()
}

// UnimplementedSysMonServer must be embedded to have forward compatible implementations.
type UnimplementedSysMonServer struct {
}

func (UnimplementedSysMonServer) GetStatistic(context.Context, *Request) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}
func (UnimplementedSysMonServer) mustEmbedUnimplementedSysMonServer() {}

// UnsafeSysMonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysMonServer will
// result in compilation errors.
type UnsafeSysMonServer interface {
	mustEmbedUnimplementedSysMonServer()
}

func RegisterSysMonServer(s grpc.ServiceRegistrar, srv SysMonServer) {
	s.RegisterService(&SysMon_ServiceDesc, srv)
}

func _SysMon_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMonServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMon_GetStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMonServer).GetStatistic(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SysMon_ServiceDesc is the grpc.ServiceDesc for SysMon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysMon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysmon.SysMon",
	HandlerType: (*SysMonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatistic",
			Handler:    _SysMon_GetStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sysmon/sysmon.proto",
}
